name: CI/CD Pipeline - Payment App

on:
  push:
    branches: [master]

jobs:
  sonar-analysis:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SonarQube Scan - Frontend
        uses: SonarSource/sonarqube-scan-action@v2.0
        with:
          projectBaseDir: frontend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Scan - Backend
        uses: SonarSource/sonarqube-scan-action@v2.0
        with:
          projectBaseDir: backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-and-deploy:
    needs: sonar-analysis
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Frontend build
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Build frontend
        run: |
          cd frontend
          npm install -g @angular/cli
          npm install
          ng build --configuration production

      # Backend setup
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          cd backend/auth_service
          python -m venv venv && source venv/bin/activate && pip install -r requirements.txt
          cd ../payment_service
          python -m venv venv && source venv/bin/activate && pip install -r requirements.txt

      # Configure Docker for insecure registry (if needed)
      - name: Configure Docker for insecure registry
        env:
          NEXUS_REPO_URL: ${{ secrets.NEXUS_REPO_URL }}
        run: |
          # Extract hostname from NEXUS_REPO_URL (remove http:// if present)
          REGISTRY_HOST=$(echo $NEXUS_REPO_URL | sed 's|http://||')
          
          # Check if insecure registry is already configured
          if ! grep -q "$REGISTRY_HOST" /etc/docker/daemon.json 2>/dev/null; then
            sudo mkdir -p /etc/docker
            echo "{\"insecure-registries\":[\"$REGISTRY_HOST\"]}" | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker
            sleep 5
          fi

      # Docker login to Nexus
      - name: Docker login to Nexus
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_REPO_URL: ${{ secrets.NEXUS_REPO_URL }}
        run: |
          # Remove http:// prefix if present for login
          REGISTRY_HOST=$(echo $NEXUS_REPO_URL | sed 's|http://||')
          echo "$NEXUS_PASSWORD" | docker login $REGISTRY_HOST -u "$NEXUS_USERNAME" --password-stdin

      # Build Docker images
      - name: Build Docker images
        run: |
          docker build -t payment-frontend ./frontend
          docker build -t auth-service ./backend/auth_service
          docker build -t payment-service ./backend/payment_service

      # Push Docker images to Nexus
      - name: Push Docker images to Nexus
        env:
          NEXUS_REPO_URL: ${{ secrets.NEXUS_REPO_URL }}
        run: |
          docker tag payment-frontend $NEXUS_REPO_URL/payment-frontend:latest
          docker tag auth-service $NEXUS_REPO_URL/auth-service:latest
          docker tag payment-service $NEXUS_REPO_URL/payment-service:latest
          
          docker push $NEXUS_REPO_URL/payment-frontend:latest
          docker push $NEXUS_REPO_URL/auth-service:latest
          docker push $NEXUS_REPO_URL/payment-service:latest

      # Logout from Docker
      - name: Docker logout
        env:
          NEXUS_REPO_URL: ${{ secrets.NEXUS_REPO_URL }}
        run: |
          REGISTRY_HOST=$(echo $NEXUS_REPO_URL | sed 's|http://||')
          docker logout $REGISTRY_HOST
        if: always()

      # Deploy directly from current workspace (No copying needed!)
      - name: Deploy with Docker Compose
        run: |
          # Stop existing containers
          docker compose down || true
          
          # Pull latest images from Nexus
          docker compose pull
          
          # Start new containers with fresh images
          docker compose up -d --build

      # Cleanup old Docker images (optional)
      - name: Cleanup old Docker images
        run: |
          docker image prune -f
          docker system prune -f --volumes
        if: always()
